import net.fabricmc.loom.task.RemapJarTask
plugins {
    alias libs.plugins.architectury
    id "dev.architectury.loom" version "1.3-SNAPSHOT"
    id "maven-publish"
    id "java"
}

apply plugin: "architectury-plugin"

architectury {
    platformSetupLoomIde()
    forge()
}

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

loom {
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }

    silentMojangMappingsLicense()

    // accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")

    forge {
        mixinConfig(
                "${mod_id}.mixins.json"
        )

        convertAccessWideners = true
        // extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        dataGen {
            mod(mod_id)
        }
    }

    runConfigs.named("data").configure {
        programArg("--existing=" + file("src/main/resources").absolutePath)
    }

    if (isJetBrainsRuntime()) {
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition'
                vmArgs '-XX:HotswapAgent=fatjar'
            }
        }
    }
    runs {
        create("gameTestServer") {
            server()
            name("Minecraft Game Test")
            source("main")

            property("forge.enabledGameTestNamespaces", mod_id)
            property("forge.gameTestServer", "true")

            mods {
                create(mod_id) {
                    sourceSet("main")
                }
            }
        }
    }
}

base {
    archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    flatDir {
        dir 'libs'
    }
    mavenLocal()
    mavenCentral()
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Jade
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu, EMI
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    } // Curse Forge File
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    } // JEI
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    } // JEI mirror, AE2
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { url = "https://maven.firstdarkdev.xyz/snapshots" } // LDLib
    maven { // Flywheel
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.jozufozu.flywheel")
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url 'https://jitpack.io' } // Mixin Extras, Fabric ASM
    maven {
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
            includeGroup("com.jozufozu.flywheel")
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Resourceful Bees Maven"
        url = "https://maven.resourcefulbees.com/repository/maven-public/"
    }
    maven {
        name = "SquidDev"
        url = "https://squiddev.cc/maven"
        content {
            includeGroup("cc.tweaked.cobalt")
        }
    }
}

dependencies {
    // to change the versions see the gradle.properties file
    minecraft libs.minecraft
    forge forge.minecraftForge

    mappings loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${libs.versions.minecraft.get()}+build.${libs.versions.quiltMappings.get()}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${libs.versions.minecraft.get()}:${libs.versions.parchment.get()}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    }
    
    modImplementation("com.tterrag.registrate:Registrate:${forge.versions.registrate.get()}")
    modApi("com.lowdragmc.ldlib:ldlib-forge-${minecraft_version}:1.0.23.a") { transitive = false }
    modImplementation("com.gregtechceu.gtceu:gtceu-${minecraft_version}:1.1.3.b") { transitive = false }
    modApi("de.oceanlabs.mcp:mcp_config:1.20.1-20230612.114412") { transitive = false }
    // additional dependencies can be specified using loom's regular format
    // specifying a "mod" dependency (like modImplementation or modApi)
    // will cause loom to remap the file to your specified mappings

    // in this example, we'll be adding JEI as a dependency
    // according to their developer example on GitHub
    // see: https://github.com/mezz/JustEnoughItems/wiki/Getting-Started
    // compile against the JEI API but do not include it at runtime
    // don't worry about loom "not finding a forge mod" here,
    // JEI's api just doesn't have any class with an @Mod annotation
    // modCompileOnly "mezz.jei:jei-1.20.1:${jei_version}:api"
    // at runtime, use the full JEI jar
    // modRuntimeOnly "mezz.jei:jei-1.20.1:${jei_version}"
}

processResources {
    // define properties that can be used during resource processing
    inputs.property "version", project.version

    // this will replace the property "${version}" in your mods.toml
    // with the version you've defined in your gradle.properties
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.theflames096.gtnhcore'
            artifactId = 'gtnhcore'
            version = '3.0'
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
          url 'https://maven.aliyun.com/repository/public/'
        }
        mavenLocal()
        mavenCentral()
    }
}
